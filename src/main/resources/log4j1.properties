# level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别
# 通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。
# 主特性是一个类  主特性的option 是一个值 ,A1 是一个类，A1.layout 也是一个类 但是ConversionPattern 是个字符串
# 根的配置方法   log4j.rootLogger = [ level ] , appenderName, appenderName, …
layout的种类
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
# org.apache.log4j.ConsoleAppender（控制台），
# org.apache.log4j.FileAppender（文件），
# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
字母参数
%m 输出代码中指定的消息
%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
%r 输出自应用启动到输出该log信息耗费的毫秒数
%c 输出所属的类目，通常就是所在类的全名 
%t 输出产生该日志事件的线程名 
%n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )
# 日志信息的优先级，日志信息的输出目的地，日志信息的输出格式
log4j.rootLogger=INFO, A1,D,MY
# Appender  A1
log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.target=System.out
# 但是发现对 console 有用
log4j.appender.A1.Threshold=INFO
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-d{yyyy-mm-dd HH:mm:ss} [%p] [%t] [%l] [%m]%n
# Appender D  应该指定多个File Appender 然后将不同类型的日志输出到不同的文件中去
log4j.appender.D=org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File=D:/logs/log.log
log4j.appender.D.Append=true
log4j.appender.D.Threshold=WARN 
log4j.appender.D.layout=org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern=%-d{yyyy-mm-dd HH:mm:ss} [%p] [%t] [%l] [%m]%n
og4j.appender.D.Encoding=UTF-8
# 自定义 File Appender 只输出同等级别的日志
log4j.appender.MY=javajob.log4.MyLogAppender
log4j.appender.MY.File=D:/logs/mylog.log
log4j.appender.MY.Append=true
log4j.appender.MY.Threshold=WARN 
log4j.appender.MY.layout=org.apache.log4j.PatternLayout
log4j.appender.MY.layout.ConversionPattern=%-d{yyyy-mm-dd HH:mm:ss} [%p] [%t] [%l] [%m]%n
log4j.appender.MY.Encoding=UTF-8


